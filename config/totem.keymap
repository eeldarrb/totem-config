//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        /* vertical combos */

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <4 14>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 3>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 16>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        left_curly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 12>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        right_curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 17>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <11 1>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 8>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <5 15>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 27>;
            require-prior-idle-ms = <50>;
            timeout-ms = <50>;
        };

        escape_alt {
            bindings = <&kp ESCAPE>;
            key-positions = <24 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <23 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        /* horizontal combos */

        num {
            bindings = <&kp HASH>;
            key-positions = <26 27>;
            require-prior-idle-ms = <180>;
            timeout-ms = <80>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <15 16>;
            require-prior-idle-ms = <180>;
            timeout-ms = <80>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <13 14>;
            require-prior-idle-ms = <180>;
            timeout-ms = <80>;
        };

        underscore {
            bindings = <&kp LS(UNDERSCORE)>;
            key-positions = <16 17>;
            require-prior-idle-ms = <115>;
            timeout-ms = <80>;
        };

        semi {
            bindings = <&kp SEMICOLON>;
            key-positions = <28 29>;
            require-prior-idle-ms = <180>;
            timeout-ms = <80>;
        };

        left_control {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <12 11>;
            require-prior-idle-ms = <115>;
            timeout-ms = <80>;
        };

        right_control {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <17 18>;
            require-prior-idle-ms = <125>;
            timeout-ms = <80>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <24 25>;
            require-prior-idle-ms = <180>;
            timeout-ms = <80>;
        };

        /* other combos */

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <10 4>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <12 18>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <2 13>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <7 6 8>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <26 12>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <11 4>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <13 16>;
            require-prior-idle-ms = <150>;
            timeout-ms = <100>;
        };

        forward_slash {
            bindings = <&kp SLASH>;
            key-positions = <6 7>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <13 11>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        alt_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <27 29>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        alt_double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 18>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        alt_backtick {
            bindings = <&kp GRAVE>;
            key-positions = <8 6>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        /* special combos */

        bluetooth_layer {
            bindings = <&mo 2>;
            key-positions = <36 33>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q  &kp W  &kp E     &kp R               &kp T          &kp Y   &kp U      &kp I              &kp O    &kp P
           &kp A  &kp S  &kp D     &kp F               &kp G          &kp H   &kp J      &kp K              &kp L    &kp BSPC
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V               &kp B          &kp N   &kp M      &kp COMMA          &kp DOT  &kp FSLH  &kp RSHIFT
                         &kp LALT  &mt LEFT_SHIFT TAB  &lt 1 SPACE    &trans  &kp SPACE  &kp RIGHT_COMMAND
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        secondary_layer {
            bindings = <
        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6    &kp N7          &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT     &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans          &trans          &trans        &trans        &trans        &trans
                                    &trans        &trans        &trans          &trans          &trans          &trans
            >;
        };

        bluetooth_layer {
            bindings = <
        &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans    &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans          &bt BT_SEL 0
                                    &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
